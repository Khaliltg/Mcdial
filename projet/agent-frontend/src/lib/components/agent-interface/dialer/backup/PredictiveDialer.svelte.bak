<script lang="ts">
  import { createEventDispatcher } from 'svelte';
  import { onMount, onDestroy } from 'svelte';
  import { fetchWithAuth } from '$lib/utils/fetchWithAuth';
  
  const dispatch = createEventDispatcher();
  
  // Propriétés
  export let agentId: string = '';
  export let campaignId: string = '';
  export let disabled: boolean = false;
  export let canManualDial: boolean = false; // Permission pour les appels manuels
  export let apiBaseUrl: string = 'http://localhost:8000/api';
  
  // État local
  let status: 'waiting' | 'ready' | 'dialing' | 'paused' = 'waiting';
  let waitingForCall: boolean = false;
  let manualNumber: string = '';
  let errorMessage: string = '';
  let pollingInterval: number;
  let showManualDialer: boolean = false;
  
  // État pour les logs d'appels
  let showCallLogs: boolean = false;
  let callLogs: any[] = [];
  let isLoadingLogs: boolean = false;
  let campaignNumbers: any[] = [];
  let isLoadingNumbers: boolean = false;
  let showCampaignNumbers: boolean = false;
  
  // Fonction pour démarrer le mode prédictif
  // Fonction pour récupérer l'historique des appels
  async function loadCallHistory() {
    isLoadingLogs = true;
    errorMessage = '';
    
    try {
      const response = await fetchWithAuth(`${apiBaseUrl}/agent/call-history?limit=10`);
      
      if (!response.ok) {
        throw new Error('Erreur lors de la récupération de l\'historique des appels');
      }
      
      const data = await response.json();
      callLogs = data.calls || [];
      showCallLogs = true;
      
      console.log('Historique des appels récupéré:', callLogs);
    } catch (error: any) { // Type assertion pour corriger l'erreur TypeScript
      console.error('Erreur lors de la récupération de l\'historique:', error);
      errorMessage = `Erreur: ${error.message || 'Inconnue'}`;
    } finally {
      isLoadingLogs = false;
    }
  }
  
  // Fonction pour récupérer les numéros à appeler pour la campagne
  async function loadCampaignNumbers() {
    isLoadingNumbers = true;
    errorMessage = '';
    
    try {
      const response = await fetchWithAuth(`${apiBaseUrl}/agent/campaign-numbers?limit=10`);
      
      if (!response.ok) {
        throw new Error('Erreur lors de la récupération des numéros de la campagne');
      }
      
      const data = await response.json();
      campaignNumbers = data.numbers || [];
      
      console.log('Numéros de la campagne récupérés:', campaignNumbers);
    } catch (error: any) { // Type assertion pour corriger l'erreur TypeScript
      console.error('Erreur lors de la récupération des numéros:', error);
      // Ne pas afficher cette erreur à l'utilisateur, juste logger
    } finally {
      isLoadingNumbers = false;
    }
  }
  
  function startPredictive() {
    if (disabled) return;
    
    status = 'ready';
    waitingForCall = true;
    errorMessage = '';
    
    // Informer le backend que l'agent est prêt à recevoir des appels
    fetch(`${apiBaseUrl}/agent/ready`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        agentId,
        campaignId
      }),
      credentials: 'include'
    })
    .then(response => {
      if (!response.ok) {
        throw new Error('Erreur lors de la mise en attente d\'appels');
      }
      return response.json();
    })
    .then(data => {
      console.log('Agent prêt à recevoir des appels', data);
      
      // Charger l'historique des appels et les numéros de la campagne
      loadCallHistory();
      loadCampaignNumbers();
    })
    .catch(error => {
      console.error('Erreur:', error);
      errorMessage = error.message;
      waitingForCall = false;
      status = 'waiting';
    });
  }
  
  // Fonction pour mettre en pause le mode prédictif
  function pausePredictive() {
    waitingForCall = false;
    status = 'paused';
    
    // Informer le backend que l'agent n'est plus disponible pour les appels
    fetch(`${apiBaseUrl}/agent/not-ready`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        agentId,
        campaignId
      }),
      credentials: 'include'
    })
    .then(response => {
      if (!response.ok) {
        throw new Error('Erreur lors de la mise en pause');
      }
      return response.json();
    })
    .then(data => {
      console.log('Agent en pause', data);
    })
    .catch(error => {
      console.error('Erreur:', error);
      errorMessage = error.message;
    });
  }
  
  // Fonction pour composer un numéro manuellement
  function dialManually() {
    if (!canManualDial || !manualNumber || disabled) return;
    
    status = 'dialing';
    waitingForCall = false;
    errorMessage = '';
    
    // Nettoyer le numéro (enlever espaces, tirets, etc.)
    const cleanNumber = manualNumber.replace(/\D/g, '');
    
    // Vérifier que le numéro est valide
    if (cleanNumber.length < 8) {
      errorMessage = 'Numéro de téléphone invalide';
      status = 'waiting';
      return;
    }
    
    // Envoyer la requête au backend
    fetch(`${apiBaseUrl}/call/dial-manual`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        agentId,
        campaignId,
        phoneNumber: cleanNumber
      }),
      credentials: 'include'
    })
    .then(response => {
      if (!response.ok) {
        throw new Error('Erreur lors de la composition du numéro');
      }
      return response.json();
    })
    .then(data => {
      console.log('Appel manuel initié', data);
      dispatch('dial', { 
        type: 'manual',
        phoneNumber: cleanNumber,
        callId: data.callId
      });
      manualNumber = '';
      showManualDialer = false;
    })
    .catch(error => {
      console.error('Erreur:', error);
      errorMessage = error.message;
      status = 'waiting';
    });
  }
  
  // Fonction pour vérifier s'il y a des appels entrants
  function checkForIncomingCalls() {
    if (!waitingForCall) return;
    
    fetch(`${apiBaseUrl}/agent/check-calls`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      },
      credentials: 'include'
    })
    .then(response => {
      if (!response.ok) {
        throw new Error('Erreur lors de la vérification des appels');
      }
      return response.json();
    })
    .then(data => {
      if (data.hasCall) {
        // Un appel est disponible
        waitingForCall = false;
        status = 'dialing';
        
        // Informer le composant parent
        dispatch('dial', { 
          type: 'predictive',
          phoneNumber: data.phoneNumber,
          callId: data.callId,
          customerInfo: data.customerInfo
        });
      }
    })
    .catch(error => {
      console.error('Erreur lors de la vérification des appels:', error);
    });
  }
  
  // Gérer l'entrée du numéro de téléphone
  function handleNumberInput(event: Event) {
    const input = event.target as HTMLInputElement;
    // Autoriser uniquement les chiffres, +, -, espaces et parenthèses
    manualNumber = input.value.replace(/[^\d\+\-\s\(\)]/g, '');
  }
  
  // Démarrer/arrêter le polling lors du montage/démontage du composant
  onMount(() => {
    // Vérifier les appels entrants toutes les 3 secondes
    pollingInterval = window.setInterval(checkForIncomingCalls, 3000);
  });
  
  onDestroy(() => {
    if (pollingInterval) {
      clearInterval(pollingInterval);
    }
  });
  
  // Réinitialiser l'état lorsque disabled change
  $: if (disabled) {
    waitingForCall = false;
    status = 'waiting';
  }
  
  // Fonction pour afficher/masquer le composeur manuel
  function toggleManualDialer() {
    if (canManualDial && !disabled) {
      showManualDialer = !showManualDialer;
    }
  }
</script>

<div class="bg-white rounded-lg shadow-lg p-4">
  <h2 class="text-lg font-bold text-gray-800 mb-4">Système d'appels</h2>
  
  {#if errorMessage}
    <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4">
      <p>{errorMessage}</p>
    </div>
  {/if}
  
  <div class="space-y-4">
    <!-- Statut actuel -->
    <div class="flex items-center justify-between">
      <div>
        <span class="font-medium">Statut: </span>
        {#if status === 'waiting'}
          <span class="text-gray-600">En attente</span>
        {:else if status === 'ready'}
          <span class="text-blue-600">Prêt</span>
        {:else if status === 'dialing'}
          <span class="text-green-600">En appel</span>
        {:else if status === 'paused'}
          <span class="text-amber-600">En pause</span>
        {/if}
      </div>
      
      {#if waitingForCall}
        <div class="flex items-center text-blue-600">
          <svg class="animate-spin -ml-1 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          En attente d'appel...
        </div>
      {/if}
    </div>
    
    <!-- Boutons de contrôle -->
    <div class="flex flex-wrap gap-2">
      {#if status === 'waiting' || status === 'paused'}
        <button 
          on:click={startPredictive}
          disabled={disabled}
          class="px-4 py-2 bg-green-500 hover:bg-green-600 text-white rounded-lg disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <div class="flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
              <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z" />
            </svg>
            Prêt à recevoir
          </div>
        </button>
      {:else if status === 'ready'}
        <button 
          on:click={pausePredictive}
          disabled={disabled}
          class="px-4 py-2 bg-amber-500 hover:bg-amber-600 text-white rounded-lg disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <div class="flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zM7 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v4a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
            </svg>
            Pause
          </div>
        </button>
      {/if}
      
      {#if canManualDial && (status === 'waiting' || status === 'paused')}
        <button 
          on:click={toggleManualDialer}
          disabled={disabled}
          class="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <div class="flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
              <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z" />
            </svg>
            Appel manuel
          </div>
        </button>
      {/if}
    </div>
    
    <!-- Composeur manuel (affiché uniquement si autorisé et activé) -->
    {#if showManualDialer && canManualDial && (status === 'waiting' || status === 'paused')}
      <div class="mt-4 p-4 border border-gray-200 rounded-lg">
        <h3 class="text-md font-medium mb-2">Composeur manuel</h3>
        
        <div class="flex">
          <input 
            type="tel"
            bind:value={manualNumber}
            on:input={handleNumberInput}
            placeholder="Entrez un numéro de téléphone"
            class="flex-1 px-3 py-2 border border-gray-300 rounded-l-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
          <button 
            on:click={dialManually}
            disabled={!manualNumber || disabled}
            class="px-4 py-2 bg-green-500 hover:bg-green-600 text-white rounded-r-md disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z" />
            </svg>
          </button>
        </div>
        
        <div class="mt-2 text-xs text-gray-500">
          <p>Entrez un numéro de téléphone valide pour effectuer un appel manuel.</p>
        </div>
      </div>
    {/if}
    
    <!-- Affichage des logs d'appels -->
    <div class="mt-6 border-t pt-4">
      <div class="flex justify-between items-center mb-2">
        <h3 class="text-md font-medium">Historique des appels</h3>
        <div class="flex space-x-2">
          <button 
            on:click={() => loadCallHistory()}
            class="p-1 text-blue-600 hover:text-blue-800 transition-colors" 
            title="Rafraîchir l'historique"
            disabled={isLoadingLogs}
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd" />
            </svg>
          </button>
          <button 
            on:click={() => showCallLogs = !showCallLogs}
            class="p-1 text-blue-600 hover:text-blue-800 transition-colors"
            title={showCallLogs ? "Masquer l'historique" : "Afficher l'historique"}
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              {#if showCallLogs}
                <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
              {:else}
                <path fill-rule="evenodd" d="M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 010 1.414z" clip-rule="evenodd" />
              {/if}
            </svg>
          </button>
        </div>
      </div>
      
      {#if showCallLogs}
        {#if isLoadingLogs}
          <div class="flex justify-center py-4">
            <div class="animate-spin rounded-full h-6 w-6 border-t-2 border-b-2 border-blue-500"></div>
          </div>
        {:else if callLogs.length === 0}
          <div class="text-center py-4 text-gray-500">
            <p>Aucun appel dans l'historique</p>
            <p class="text-xs mt-1">Les appels s'afficheront ici une fois que vous aurez commencé à appeler</p>
          </div>
        {:else}
          <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
              <thead class="bg-gray-50">
                <tr>
                  <th scope="col" class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                  <th scope="col" class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Numéro</th>
                  <th scope="col" class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Statut</th>
                  <th scope="col" class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Durée</th>
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200">
                {#each callLogs as call}
                  <tr class="hover:bg-gray-50">
                    <td class="px-3 py-2 whitespace-nowrap text-sm text-gray-900">
                      {new Date(call.call_date).toLocaleString()}
                    </td>
                    <td class="px-3 py-2 whitespace-nowrap text-sm text-gray-900">
                      {call.phone_number}
                    </td>
                    <td class="px-3 py-2 whitespace-nowrap text-sm">
                      <span class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                        call.status === 'ANSWERED' || call.status === 'HUMAN' || call.status === 'SALE' 
                          ? 'bg-green-100 text-green-800' 
                          : call.status === 'FAILED' || call.status === 'BUSY' || call.status === 'NOANSWER'
                            ? 'bg-red-100 text-red-800'
                            : call.status === 'CBHOLD' || call.status === 'CALLBK'
                              ? 'bg-blue-100 text-blue-800'
                              : 'bg-yellow-100 text-yellow-800'
                      }`}>
                        {call.status}
                      </span>
                    </td>
                    <td class="px-3 py-2 whitespace-nowrap text-sm text-gray-900">
                      {call.duration_formatted || '0:00'}
                    </td>
                  </tr>
                {/each}
              </tbody>
            </table>
          </div>
        {/if}
      </div>
    </div>
    
    <!-- Affichage des numéros de la campagne -->
    <div class="mt-6 border-t pt-4">
      <div class="flex justify-between items-center mb-2">
        <h3 class="text-md font-medium">Numéros à appeler</h3>
        <div class="flex space-x-2">
          <button 
            on:click={() => loadCampaignNumbers()}
            class="p-1 text-blue-600 hover:text-blue-800 transition-colors" 
            title="Rafraîchir les numéros"
            disabled={isLoadingNumbers}
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd" />
            </svg>
          </button>
          <button 
            on:click={() => showCampaignNumbers = !showCampaignNumbers}
            class="p-1 text-blue-600 hover:text-blue-800 transition-colors"
            title={showCampaignNumbers ? "Masquer les numéros" : "Afficher les numéros"}
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              {#if showCampaignNumbers}
                <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
              {:else}
                <path fill-rule="evenodd" d="M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 010 1.414z" clip-rule="evenodd" />
              {/if}
            </svg>
          </button>
        </div>
      </div>
      
      {#if showCampaignNumbers}
        {#if isLoadingNumbers}
          <div class="flex justify-center py-4">
            <div class="animate-spin rounded-full h-6 w-6 border-t-2 border-b-2 border-blue-500"></div>
          </div>
        {:else if campaignNumbers.length === 0}
          <div class="text-center py-4 text-gray-500">
            <p>Aucun numéro disponible</p>
            <p class="text-xs mt-1">Aucun numéro n'est actuellement disponible pour cette campagne</p>
          </div>
        {:else}
          <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
              <thead class="bg-gray-50">
                <tr>
                  <th scope="col" class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Numéro</th>
                  <th scope="col" class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nom</th>
                  <th scope="col" class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Statut</th>
                  <th scope="col" class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Appels</th>
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200">
                {#each campaignNumbers as number}
                  <tr class="hover:bg-gray-50">
                    <td class="px-3 py-2 whitespace-nowrap text-sm text-gray-900">
                      {number.phone_number}
                    </td>
                    <td class="px-3 py-2 whitespace-nowrap text-sm text-gray-900">
                      {number.first_name} {number.last_name}
                    </td>
                    <td class="px-3 py-2 whitespace-nowrap text-sm">
                      <span class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                        number.status === 'NEW' || !number.status
                          ? 'bg-green-100 text-green-800'
                          : number.status === 'CBHOLD'
                            ? 'bg-blue-100 text-blue-800'
                            : 'bg-gray-100 text-gray-800'
                      }`}>
                        {number.status || 'NEW'}
                      </span>
                    </td>
                    <td class="px-3 py-2 whitespace-nowrap text-sm text-gray-900">
                      {number.called_count || 0}
                    </td>
                  </tr>
                {/each}
              </tbody>
            </table>
          </div>
        {/if}
      {/if}
    </div>
  </div>
</div>
